1. Cos’è ReactJS?
R: ReactJS è una libreria javascript sviluppata da Facebook (ora Meta). Non è un framework, contiene: strumenti di Transpilling (trascodifica
	da un linguaggio ad un altro, esempio Babel), raggruppamenti di moduli. Permette il refresh automatico.
	con ReactJS non manipoliamo direttamente il DOM. La libreria è diventata open source nel 2013.

Domanda aperta
2. ReactJS è un framework, non una libreria.
Vero / Falso
R: Falso

3. Il file package.json contiene…
– Informazioni non essenziali, può essere tranquillamente eliminato
– Solamente il nome e la versione dell’applicazione
– Molte informazioni utili, come ad esempio l’elenco di tutte le dipendenze richieste dall’applicazione
– Il primo componente React caricato all’avvio

R: Molte informazioni utili, come ad esempio l’elenco di tutte le dipendenze richieste dall’applicazione

4. create-react-app è l’unico modo possibile per creare un’applicazione React.
Vero / Falso
R: Falso

5. Qual è il comando da lanciare nel terminale per creare una nuova create-react-app con nome “test”?
– npx create-react-app test
– npm create-react-app test
– npx create-react-app-test
– npx create-new-react-app test

R: npx create-react-app test

6. Cos’è un componente React?
– Una libreria che è necessario importare dentro l’applicazione
– Una pagina ben specifica all’interno dell’applicazione
– Un blocco di logica/contenuto riutilizzabile all’interno dell’applicazione
– Una landing page per l’applicazione

R: Un blocco di logica/contenuto riutilizzabile all’interno dell’applicazione

7. Un componente React può venire creato in tre modi: come funzione, classe o interfaccia.
Vero / Falso
R: Falso

8. Le props sono frammenti di informazione assegnati all’invocazione di un componente React, utili al fine di rendere il componente dinamico e più riutilizzabile.
Vero/Falso
R: Vero

9. Le props possono essere passate solamente da un componente genitore ad un componente figlio, non è possibile fare il contrario 
Vero/Falso
R: Vero

10. Da dove possono venire recuperate le props all’interno di un componente React creato come classe?
– Sono proprietà contenute in un oggetto accessibile attraverso i parametri della funzione
– Possono essere recuperate all’interno dello oggetto ‘this’, dentro un sotto-oggetto chiamato ‘props’
– Vengono applicate come proprietà dell’oggetto globale ‘window’
– Vengono applicate come proprietà dell’oggetto ‘document’

R: Possono essere recuperate all’interno dello oggetto ‘this’, dentro un sotto-oggetto chiamato ‘props’

